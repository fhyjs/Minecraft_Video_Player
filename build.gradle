import org.gradle.internal.os.OperatingSystem
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

group = 'org.eu.hanana.reimu.mcvp'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}
project.ext.lwjglVersion = "3.3.2"
project.ext.jomlVersion = "1.10.5"
project.ext.lwjgl3_awtVersion = "0.1.8"
project.ext.steamworks4jVersion = "1.9.0"
project.ext.steamworks4j_serverVersion = "1.9.0"
switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

dependencies {
    implementation 'uk.co.caprica:vlcj:4.8.2'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation group: 'org.bytedeco', name: 'javacv-platform', version: '1.5.9'
    implementation(files('libs/telnet_mc-1.0-SNAPSHOT-all.jar'))
    implementation(files('libs/Spritecraft.jar'))
    implementation 'javazoom:jlayer:1.0.1'

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    implementation "org.joml:joml:${jomlVersion}"
    implementation "org.lwjglx:lwjgl3-awt:${lwjgl3_awtVersion}"
    implementation "org.lwjgl:lwjgl-openal"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    implementation "com.code-disaster.steamworks4j:steamworks4j:${steamworks4jVersion}"
    implementation "com.code-disaster.steamworks4j:steamworks4j-server:${steamworks4j_serverVersion}"

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
test {
    useJUnitPlatform()
}